# vim: set ft=bird nofoldenable:
ipv4 table static4;
ipv6 table static6;
ipv4 table bgp4;
ipv6 table bgp6;

ipv4 table kernel_tun_siit4;
ipv6 table kernel_tun_siit6;

define C_SELF = 65026;
define C_CTL_PREVENT_KERNEL = 10006;
define C_CTL_ALLOW_OUTSIDE = 10011;
define C_CTL_ALLOW_INSIDE = 10012;

function filter_bgp_community() {
  bgp_community.delete([(C_SELF, 10000..29999)]);
}

protocol direct {
  ipv4 {
    table bgp4;
  };
  ipv6 {
    table bgp6;
  };
  interface "-me0", "<%= node.dig(:plat, :interfaces).fetch(:outside).fetch(:name) %>", "<%= node.dig(:plat, :interfaces).fetch(:inside).fetch(:name) %>", "lo";
}

protocol kernel kernel_bgp4 {
  persist;
  kernel table 64;
  ipv4 {
    table kernel_tun_siit4;
    export all;
  };
}

protocol kernel kernel_bgp6 {
  persist;
  kernel table 64;
  ipv6 {
    table kernel_tun_siit6;
    export all;
  };
}

protocol kernel kernel_static4 {
  persist;
  ipv4 {
    table static4;
    export all;
  };
}

protocol kernel kernel_static6 {
  persist;
  ipv6 {
    table static6;
    export all;
  };
}

protocol static {
  # Installed to BGP table, default and tun-siit kernel table
  ipv4 {
    table static4;
  };

  route <%= node.dig(:plat, :nat64).fetch(:outer_private) %>/32 via "tun-siit" {
    bgp_community.add((C_SELF,C_CTL_ALLOW_OUTSIDE));
  };
  route <%= node.dig(:plat, :nat64).fetch(:outer_public) %>/32 via "tun-siit" {
    bgp_community.add((C_SELF,C_CTL_ALLOW_OUTSIDE));
  };
}
# protocol static static_bgp4 {
#   ipv4 {
#     table bgp4;
#   };
# }
protocol pipe static2bgp4 {
  table static4;
  peer table bgp4;
  export all;  # ->
  import none;  # <-
}

protocol static {
  # Installed to default kernel table, may propagate to tun-siit kernel table
  # Not installed to BGP table
  ipv6 {
    table static6;
  };
  route 2001:df0:8500:ca6d::/64 blackhole;
  route 2001:df0:8500:ca64::/64 blackhole;
  route 2001:df0:8500:ca64:a9:8200::/96 via "tun-siit";
}
protocol static static_bgp6 {
  # Installed to BGP table, may propagate to tun-siit kernel table
  ipv6 {
    table bgp6;
  };
  igp table bgp4;
  igp table bgp6;
  # Prevent propagation to always have blackhole route for pref64n and related prefixes in kernel tun-siit table
  route 2001:df0:8500:ca6d::/64 recursive 192.0.0.0 {
    bgp_community.add((C_SELF,C_CTL_ALLOW_INSIDE));
    bgp_community.add((C_SELF,C_CTL_PREVENT_KERNEL));
  };
  route 2001:df0:8500:ca64::/64 recursive 192.0.0.0 {
    bgp_community.add((C_SELF,C_CTL_ALLOW_INSIDE));
    bgp_community.add((C_SELF,C_CTL_PREVENT_KERNEL));
  };
}
# protocol pipe static2bgp6 {
#   table static6;
#   peer table bgp6;
#   export all;  # ->
#   import none;  # <-
# }


filter prevent_kernel_installation {
  if (defined(bgp_community)) then if ((C_SELF,C_CTL_PREVENT_KERNEL) ~ bgp_community) then  reject;
  accept;
}

protocol pipe bgp2kernel_siit4 {
  table bgp4;
  peer table kernel_tun_siit4;
  export filter prevent_kernel_installation;  # ->
  import none;  # <-
}
protocol pipe bgp2kernel_siit6 {
  table bgp6;
  peer table kernel_tun_siit6;
  export filter prevent_kernel_installation;  # ->
  import none;  # <-
}
protocol pipe static2kernel_siit4 {
  table static4;
  peer table kernel_tun_siit4;
  export filter prevent_kernel_installation;  # ->
  import none;  # <-
}
protocol pipe static2kernel_siit6 {
  table static6;
  peer table kernel_tun_siit6;
  export filter prevent_kernel_installation;  # ->
  import none;  # <-
}

# er
<%- outside = node.dig(:plat, :interfaces).fetch(:outside) -%>
protocol bgp bgp_outside {
  local as <%= outside.fetch(:local_as) %>;
  neighbor <%= outside.fetch(:link6).fetch(:peer) %> as <%= outside.fetch(:peer_as) %>;

  ipv4 {
    table bgp4;
    import filter {
      filter_bgp_community();
      accept;
    };
    export filter {
      if dest = RTD_UNREACHABLE then reject; # static recursive route can be RTD_UNREACHABLE when unresolvable
      if (defined(bgp_community)) then if ((C_SELF,C_CTL_ALLOW_OUTSIDE) ~ bgp_community) then accept; 
      if proto = "direct1" then accept;
      reject;
    };
  };
  ipv6 {
    table bgp6;
    import filter {
      filter_bgp_community();
      accept;
    };
    export filter {
      if dest = RTD_UNREACHABLE then reject; # static recursive route can be RTD_UNREACHABLE when unresolvable
      if (defined(bgp_community)) then if ((C_SELF,C_CTL_ALLOW_OUTSIDE) ~ bgp_community) then accept;
      if proto = "direct1" then accept;
      reject;
    };
  };
}

# cs
<%- inside = node.dig(:plat, :interfaces).fetch(:inside) -%>
protocol bgp bgp_inside {
  local as <%= inside.fetch(:local_as) %>;
  neighbor <%= inside.fetch(:link6).fetch(:peer) %> as <%= inside.fetch(:peer_as) %>;

  ipv4 {
    table bgp4;
    import filter {
      filter_bgp_community();
      if bgp_path ~ [= * <%= inside.fetch(:peer_as) %> =] then accept; # accept only direct path
      reject;
    };
    export filter {
      if dest = RTD_UNREACHABLE then reject; # static recursive route can be RTD_UNREACHABLE when unresolvable
      if (defined(bgp_community)) then if ((C_SELF,C_CTL_ALLOW_INSIDE) ~ bgp_community) then accept;
      if proto = "direct1" then accept;
      reject;
    };
  };
  ipv6 {
    table bgp6;
    import filter {
      filter_bgp_community();
      if bgp_path ~ [= * <%= inside.fetch(:peer_as) %> =] then accept; # accept only direct path
      reject;
    };
    export filter {
      if dest = RTD_UNREACHABLE then reject; # static recursive route can be RTD_UNREACHABLE when unresolvable
      if (defined(bgp_community)) then if ((C_SELF,C_CTL_ALLOW_INSIDE) ~ bgp_community) then accept;
      if proto = "direct1" then accept;
    };
  };
}
