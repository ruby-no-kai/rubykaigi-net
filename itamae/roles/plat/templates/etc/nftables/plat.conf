# vim: ft=nftables
<%-
def embed_v4(v6prefix, v4)
  v4addr, v4prefixlen = v4.split(?/, 2)
  v6prefixlen = v4prefixlen.to_i + 96 if v4prefixlen

  v6prefix.sub('::/96', [sprintf(':%02x%02x:%02x%02x', *v4.split(?.).map(&:to_i)), *v6prefixlen].join(?/)) or fail 'v6prefix is not /96'
end

nat64 = node.dig(:plat, :nat64)
outer_public = nat64.fetch(:outer_public)
outer_private = nat64.fetch(:outer_private)
private_snat_dest = %w[10.33.0.0/16 192.50.220.164/31]

pref64n = '2001:df0:8500:ca64:a9:8200::/96'
internal = '2001:df0:8500:ca61:ac:8200::/96'
-%>
define pref64n = 2001:df0:8500:ca64:a9:8200::/96
define nat64_outer = { <%= outer_public %>, <%= outer_private %> }
define private_snat_dest = { <%= private_snat_dest.map {|_| embed_v4(pref64n, _) }.join(', ') %> }

define if_outside = "<%= node.dig(:plat, :interfaces, :outside).fetch(:name) %>"
define if_inside = "<%= node.dig(:plat, :interfaces, :inside).fetch(:name) %>"

table inet plat {
  ct timeout udp-oneshot {
    protocol udp;
    policy = { unreplied: 10s, replied: 0s };
  }

  chain ct-timeout {
    udp dport { domain, ntp } ct timeout set "udp-oneshot" return
  }

  chain prerouting {
    type filter hook prerouting priority raw; policy accept;

    ip daddr $nat64_outer notrack
    ip saddr $nat64_outer notrack
  }

  chain dstnat {
    type nat hook prerouting priority dstnat;
    ip6 daddr 2001:df0:8500:ca6d:53::c counter dnat ip6 to <%= embed_v4(pref64n, '192.50.220.164') %>
    ip6 daddr 2001:df0:8500:ca6d:53::d counter dnat ip6 to <%= embed_v4(pref64n, '192.50.220.165') %>
  }

  map snat_private {
    type ipv6_addr: ct_label
    flags interval, constant
    elements = {
      <%= embed_v4(pref64n, '10.33.0.0/16') %>: "snat:private",
      <%= embed_v4(pref64n, '192.50.220.164/31') %>: "snat:private-dns",
    }
  }

  chain srcnat {
    type nat hook postrouting priority srcnat;
    ip6 daddr @snat_private ct label set ip6 daddr map @snat_private goto srcnat_private
    ip6 daddr $pref64n ct label set "snat:public" goto srcnat_public
  }

  chain srcnat_private {
    meta l4proto {tcp, udp} counter snat ip6 to <%= embed_v4(internal, outer_private) %>:1024-65535
    counter snat ip6 to <%= embed_v4(internal, outer_private) %>
  }

  chain srcnat_public {
    meta l4proto {tcp, udp} counter snat ip6 to <%= embed_v4(internal, outer_public) %>:1024-65535
    counter snat ip6 to <%= embed_v4(internal, outer_public) %>
  }

  chain input {
    type filter hook input priority filter; policy drop;

    iif lo accept
    ct state established,related accept

    ip protocol icmp accept
    ip6 nexthdr icmpv6 accept

    ip saddr { 10.33.0.0/23, 10.33.128.0/18 } tcp dport { ssh } accept
    ip saddr { 10.33.128.0/18 } tcp dport { 9100, 9324 } accept
    ip6 saddr { 2001:df0:8500:ca00::/64, 2001:df0:8500:caa0::/64, 2406:da14:dfe:c000::/56 } tcp dport { ssh } accept

    ip saddr 10.33.22.0/24 tcp dport { bgp } accept
    ip6 saddr 2001:df0:8500:ca22::/64 tcp dport { bgp } accept

    counter
  }

  chain forward {
    type filter hook forward priority filter; policy drop;

    jump ct-timeout

    iif $if_outside oifname "tun-siit" counter goto forward-outside2xlat
    iifname "tun-siit" oif $if_inside counter goto forward-xlat2inside
    iif $if_inside oifname "tun-siit" counter goto forward-inside2xlat
    iifname "tun-siit" oif $if_outside counter goto forward-xlat2outside
    iifname "tun-siit" oifname "tun-siit" counter goto forward-xlat2xlat

    counter
  }

  chain forward-outside2xlat {
    ip daddr $nat64_outer accept
    counter drop
  }

  chain forward-xlat2inside {
    ct state invalid,new,untracked counter counter drop

    ip6 saddr { $pref64n, 2001:df0:8500:ca6d::/64 } counter accept
    counter drop
  }

  chain forward-inside2xlat {
    meta l4proto tcp ct state invalid,untracked counter reject with tcp reset
    ct state invalid,untracked counter drop

    ip6 saddr 2001:df0:8500:ca00::/56 ip6 daddr { $pref64n, 2001:df0:8500:ca6d::/64 } counter accept
    counter drop
  }

  chain forward-xlat2outside {
    ip saddr $nat64_outer accept
    counter drop
  }

  chain forward-xlat2xlat {
    meta nfproto ipv4 accept
    counter drop
  }
}
