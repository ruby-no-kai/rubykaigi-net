# vim: set ft=bird nofoldenable:
ipv4 table main4;
ipv6 table main6;
ipv4 table client4;
ipv6 table client6;
ipv4 table server4;
ipv6 table server6;

protocol kernel kernel_main4 {
  kernel table 254;
  merge paths on;
  ipv4 {
    table main4;
    export all;
  };
}

protocol kernel kernel_main6 {
  kernel table 254;
  merge paths on;
  ipv6 {
    table main6;
    export all;
  };
}

protocol kernel kernel_client4 {
  kernel table 100;
  merge paths on;
  ipv4 {
    table client4;
    export all;
  };
}
protocol kernel kernel_client6 {
  kernel table 100;
  merge paths on;
  ipv6 {
    table client6;
    export all;
  };
}

protocol kernel kernel_server4 {
  kernel table 101;
  merge paths on;
  ipv4 {
    table server4;
    export all;
  };
}

protocol kernel kernel_server6 {
  kernel table 101;
  merge paths on;
  ipv6 {
    table server6;
    export all;
  };
}

protocol static static_main4 {
  ipv4 {
    table main4;
  };
  igp table main4;
  igp table main6;

  route <%= node.dig(:show, :addresses).fetch(:client4_internal) %>/32 via fe80::b%'veth_c0';
  route <%= node.dig(:show, :addresses).fetch(:server4_internal) %>/32 via fe80::b%'veth_s0';
}
protocol static static_main6 {
  ipv6 {
    table main6;
  };
  igp table main4;
  igp table main6;

  route <%= node.dig(:show, :addresses).fetch(:client6_internal) %>/128 via fe80::b%'veth_c0';
  route <%= node.dig(:show, :addresses).fetch(:server6_internal) %>/128 via fe80::b%'veth_s0';
}

protocol static static_client4 {
  ipv4 {
    table client4;
  };

  route <%= node.dig(:show, :addresses).fetch(:client4) %> blackhole;
}
protocol static static_client6 {
  ipv6 {
    table client6;
  };

  route <%= node.dig(:show, :addresses).fetch(:client6) %> blackhole;
}

protocol static static_server4 {
  ipv4 {
    table server4;
  };

  route <%= node.dig(:show, :addresses).fetch(:server4) %>/32 blackhole;
}
protocol static static_server6 {
  ipv6 {
    table server6;
  };

  route <%= node.dig(:show, :addresses).fetch(:server6) %>/128 blackhole;
  route <%= node.dig(:show, :addresses).fetch(:server6_cidr) %> blackhole;
}

# er
<%- servers = node.dig(:show, :interfaces).fetch(:servers); servers.each_with_index do |server, i| -%>
protocol bgp bgp_server<%= i %> {
  local as <%= server.fetch(:local_as) %>;
  neighbor <%= server.fetch(:link6).fetch(:peer) %> as <%= server.fetch(:peer_as) %>;

  ipv4 {
    table server4;
    import all;
    export filter {
      if proto = "static_server4" then accept;
      reject;
    };
  };
  ipv6 {
    table server6;
    import all;
    export filter {
      if proto = "static_server6" then accept;
      reject;
    };
  };
}
<%- end -%>

# cs
<%- client = node.dig(:show, :interfaces).fetch(:client) -%>
protocol bgp bgp_client {
  local as <%= client.fetch(:local_as) %>;
  neighbor <%= client.fetch(:link6).fetch(:peer) %> as <%= client.fetch(:peer_as) %>;

  ipv4 {
    table client4;
    extended next hop on;
    import all;
    export filter {
      if proto = "static_client4" then accept;
      reject;
    };
  };
  ipv6 {
    table client6;
    import all;
    export filter {
      if proto = "static_client6" then accept;
      reject;
    };
  };
}
