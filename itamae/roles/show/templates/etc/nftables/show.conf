# vim: ft=nftables

define if_client = "<%= node.dig(:show, :interfaces, :client).fetch(:name) %>"
define if_server = { <%= node.dig(:show, :interfaces, :servers).map { |i| %("#{i.fetch(:name)}") }.join(', ') %> }

define if_client_veth = "veth_c0"
define if_server_veth = "veth_s0"

define client4 = <%= node.dig(:show, :addresses, :client4) %>
define client6 = <%= node.dig(:show, :addresses, :client6) %>
define client4_internal = <%= node.dig(:show, :addresses, :client4_internal) %>
define client6_internal = <%= node.dig(:show, :addresses, :client6_internal) %>
define client6_snat = <%= node.dig(:show, :addresses, :client6_snat) %>

define server4 = <%= node.dig(:show, :addresses, :server4) %>
define server6 = <%= node.dig(:show, :addresses, :server6) %>
define server4_internal = <%= node.dig(:show, :addresses, :server4_internal) %>
define server6_internal = <%= node.dig(:show, :addresses, :server6_internal) %>
define server6_dnat = <%= node.dig(:show, :addresses, :server6_dnat) %>

table inet plat {
  chain dstnat {
    type nat hook prerouting priority dstnat;
    iifname $if_server ip daddr $server4 counter dnat ip to $server4_internal
    iifname $if_server ip6 daddr $server6 counter dnat ip6 to $server6_internal

    iifname $if_server ip6 daddr $server6_dnat meta l4proto {tcp, udp} counter dnat ip6 to $server6_internal fully-random
    iifname $if_server ip6 daddr $server6_dnat counter dnat ip6 to $server6_internal fully-random
  }

  chain srcnat {
    type nat hook postrouting priority srcnat;
    ip saddr $client4_internal meta l4proto {tcp, udp} counter snat ip to <%= node.dig(:show,:addresses,:client4_range) %>:1024-65535 fully-random
    ip saddr $client4_internal counter snat ip to <%= node.dig(:show,:addresses,:client4_range) %> fully-random
    ip6 saddr $client6_internal meta l4proto {tcp, udp} counter snat ip6 to <%= node.dig(:show,:addresses, :client6_range) %>:1024-65535 fully-random
    ip6 saddr $client6_internal counter snat ip6 to <%= node.dig(:show,:addresses, :client6_range) %> fully-random
  }

  chain input {
    type filter hook input priority filter; policy drop;

    iif lo accept
    ct state established,related accept

    ip protocol icmp accept
    ip6 nexthdr icmpv6 accept

    ip saddr { 10.33.0.0/23, 10.33.128.0/18, 10.33.100.0/24 } tcp dport { ssh } accept
    ip saddr { 10.33.128.0/18 } tcp dport { 9100, 9324 } accept
    ip6 saddr { 2001:df0:8500:ca00::/64, 2001:df0:8500:caa0::/64, 2406:da14:dfe:c000::/56 } tcp dport { ssh } accept

    ip saddr 10.33.22.0/24 tcp dport { bgp } accept
    ip6 saddr 2001:df0:8500:ca22::/64 tcp dport { bgp } accept

    counter
  }

  chain forward_iface_pair {
    iifname $if_client_veth oifname $if_client accept
    iifname $if_client oifname $if_client_veth accept

    iifname $if_server_veth oifname $if_server accept
    iifname $if_server oifname $if_server_veth accept
  }

  chain forward {
    type filter hook forward priority filter; policy drop;

    ct state established,related accept
    ip6 saddr { 2001:df0:8500:ca00::/56, $client6_internal, $client6_snat, $server6_internal, $server6_dnat } goto forward_iface_pair
    ip saddr { 192.50.220.0/24, 10.33.0.0/16, $client4_internal, $server4_internal } goto forward_iface_pair

    counter
  }
}
